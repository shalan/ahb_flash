/* Generated by Yosys 0.16 (git sha1 UNKNOWN, clang 13.1.6 -fPIC -Os) */
module AHB_MASTER(HCLK, HRESETn, HADDR, HTRANS, HSIZE, HWRITE, HWDATA, HREADY, HRDATA, wr, rd, done, busy, addr, wdata, rdata);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  (* src = "AHB_UART_MASTER.v:298.25-298.30" *)
  output [31:0] HADDR;
  wire [31:0] HADDR;
  (* src = "AHB_UART_MASTER.v:294.25-294.29" *)
  input HCLK;
  wire HCLK;
  (* src = "AHB_UART_MASTER.v:304.29-304.35" *)
  input [31:0] HRDATA;
  wire [31:0] HRDATA;
  (* src = "AHB_UART_MASTER.v:303.29-303.35" *)
  input HREADY;
  wire HREADY;
  (* src = "AHB_UART_MASTER.v:295.25-295.32" *)
  input HRESETn;
  wire HRESETn;
  (* src = "AHB_UART_MASTER.v:300.29-300.34" *)
  output [2:0] HSIZE;
  wire [2:0] HSIZE;
  (* src = "AHB_UART_MASTER.v:299.29-299.35" *)
  output [1:0] HTRANS;
  wire [1:0] HTRANS;
  (* src = "AHB_UART_MASTER.v:302.29-302.35" *)
  output [31:0] HWDATA;
  wire [31:0] HWDATA;
  (* src = "AHB_UART_MASTER.v:301.29-301.35" *)
  output HWRITE;
  wire HWRITE;
  (* src = "AHB_UART_MASTER.v:310.25-310.29" *)
  input [31:0] addr;
  wire [31:0] addr;
  (* src = "AHB_UART_MASTER.v:309.25-309.29" *)
  output busy;
  wire busy;
  (* src = "AHB_UART_MASTER.v:308.25-308.29" *)
  output done;
  wire done;
  (* src = "AHB_UART_MASTER.v:324.22-324.28" *)
  wire [2:0] nstate;
  (* src = "AHB_UART_MASTER.v:307.25-307.27" *)
  input rd;
  wire rd;
  (* src = "AHB_UART_MASTER.v:312.25-312.30" *)
  output [31:0] rdata;
  wire [31:0] rdata;
  (* src = "AHB_UART_MASTER.v:324.15-324.20" *)
  reg [2:0] state;
  (* src = "AHB_UART_MASTER.v:311.25-311.30" *)
  input [31:0] wdata;
  wire [31:0] wdata;
  (* src = "AHB_UART_MASTER.v:306.25-306.27" *)
  input wr;
  wire wr;
  assign _00_ = state[1] | ~(state[0]);
  assign HWRITE = state[2] & ~(_00_);
  assign _01_ = ~state[2];
  assign _02_ = _00_ | _01_;
  assign _03_ = ~(state[1] & state[0]);
  assign _04_ = _03_ | state[2];
  assign HTRANS[1] = ~(_04_ & _02_);
  assign _05_ = state[1] | state[0];
  assign _06_ = _01_ & ~(_05_);
  assign busy = ~_06_;
  assign done = state[2] & ~(state[0]);
  assign _07_ = ~HREADY;
  assign _08_ = _07_ & ~(_02_);
  assign _09_ = _07_ & ~(_04_);
  assign _10_ = _09_ | _08_;
  assign _11_ = state[0] | ~(state[1]);
  assign _12_ = _01_ & ~(_11_);
  assign _13_ = ~(_12_ & HREADY);
  assign _14_ = _01_ & ~(_00_);
  assign _15_ = _14_ | ~(_13_);
  assign _16_ = _15_ | _10_;
  assign _17_ = ~(rd & HREADY);
  assign _18_ = HREADY ? wr : rd;
  assign _19_ = _17_ & ~(_18_);
  assign _20_ = _06_ & ~(_19_);
  assign _21_ = _20_ | _16_;
  assign _22_ = state[1] ? _01_ : state[0];
  assign _23_ = _22_ | _06_;
  assign nstate[0] = _23_ & _21_;
  assign _24_ = HREADY ? _02_ : _04_;
  assign _25_ = HREADY ? _14_ : _12_;
  assign _26_ = _24_ & ~(_25_);
  assign _27_ = ~(wr & HREADY);
  assign _28_ = rd & ~(HREADY);
  assign _29_ = HREADY | ~(wr);
  assign _30_ = _29_ | _28_;
  assign _31_ = _27_ & ~(_30_);
  assign _32_ = _17_ & ~(_31_);
  assign _33_ = _06_ & ~(_32_);
  assign _34_ = _26_ & ~(_33_);
  assign nstate[1] = _23_ & ~(_34_);
  assign _35_ = HREADY & ~(_04_);
  assign _36_ = _35_ | HWRITE;
  assign _37_ = _13_ & ~(_36_);
  assign _38_ = _27_ | ~(_17_);
  assign _39_ = _06_ & ~(_38_);
  assign _40_ = _37_ & ~(_39_);
  assign nstate[2] = _23_ & ~(_40_);
  (* src = "AHB_UART_MASTER.v:326.5-330.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[0] <= 1'h0;
    else state[0] <= nstate[0];
  (* src = "AHB_UART_MASTER.v:326.5-330.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[1] <= 1'h0;
    else state[1] <= nstate[1];
  (* src = "AHB_UART_MASTER.v:326.5-330.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[2] <= 1'h0;
    else state[2] <= nstate[2];
  assign HADDR = addr;
  assign HSIZE = 3'h2;
  assign HTRANS[0] = 1'h0;
  assign HWDATA = wdata;
  assign rdata = HRDATA;
endmodule

(* src = "AHB_UART_MASTER.v:51.1-290.10" *)
module AHB_UART_MASTER(HCLK, HRESETn, HADDR, HTRANS, HSIZE, HWRITE, HWDATA, HREADY, HRDATA, RX, TX);
  (* src = "AHB_UART_MASTER.v:188.16-188.44" *)
  wire _000_;
  (* src = "AHB_UART_MASTER.v:204.16-204.43" *)
  wire _001_;
  (* src = "AHB_UART_MASTER.v:209.16-209.49" *)
  wire _002_;
  (* src = "AHB_UART_MASTER.v:212.16-212.50" *)
  wire _003_;
  (* src = "AHB_UART_MASTER.v:215.16-215.50" *)
  wire _004_;
  (* src = "AHB_UART_MASTER.v:218.16-218.50" *)
  wire _005_;
  (* src = "AHB_UART_MASTER.v:259.13-259.48" *)
  wire _006_;
  (* src = "AHB_UART_MASTER.v:260.13-260.47" *)
  wire _007_;
  (* src = "AHB_UART_MASTER.v:273.12-273.21" *)
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  (* force_downto = 32'd1 *)
  (* src = "AHB_UART_MASTER.v:0.0-0.0|AHB_UART_MASTER.v:121.9-181.16|/opt/homebrew/bin/../share/yosys/techmap.v:583.28-583.35" *)
  (* unused_bits = "0 2 3 6 7 8 9 10 11 12 13 15 16 17 19 23 24 25 26 27 28 29 30 32 33 34 36 38 39 40 41 45 48 52" *)
  wire [55:0] _136_;
  (* src = "AHB_UART_MASTER.v:58.25-58.30" *)
  output [31:0] HADDR;
  wire [31:0] HADDR;
  (* src = "AHB_UART_MASTER.v:53.25-53.29" *)
  input HCLK;
  wire HCLK;
  (* src = "AHB_UART_MASTER.v:64.29-64.35" *)
  input [31:0] HRDATA;
  wire [31:0] HRDATA;
  (* src = "AHB_UART_MASTER.v:63.29-63.35" *)
  input HREADY;
  wire HREADY;
  (* src = "AHB_UART_MASTER.v:54.25-54.32" *)
  input HRESETn;
  wire HRESETn;
  (* src = "AHB_UART_MASTER.v:60.29-60.34" *)
  output [2:0] HSIZE;
  wire [2:0] HSIZE;
  (* src = "AHB_UART_MASTER.v:59.29-59.35" *)
  output [1:0] HTRANS;
  wire [1:0] HTRANS;
  (* src = "AHB_UART_MASTER.v:62.29-62.35" *)
  output [31:0] HWDATA;
  wire [31:0] HWDATA;
  (* src = "AHB_UART_MASTER.v:61.29-61.35" *)
  output HWRITE;
  wire HWRITE;
  (* src = "AHB_UART_MASTER.v:66.25-66.27" *)
  input RX;
  wire RX;
  (* src = "AHB_UART_MASTER.v:67.25-67.27" *)
  output TX;
  wire TX;
  (* src = "AHB_UART_MASTER.v:104.17-104.21" *)
  reg [31:0] addr;
  (* src = "AHB_UART_MASTER.v:90.17-90.23" *)
  wire b_tick;
  (* src = "AHB_UART_MASTER.v:99.17-99.23" *)
  wire cmd_rd;
  (* src = "AHB_UART_MASTER.v:100.17-100.23" *)
  wire cmd_wr;
  (* src = "AHB_UART_MASTER.v:102.17-102.21" *)
  wire done;
  (* src = "AHB_UART_MASTER.v:109.17-109.23" *)
  wire [3:0] nstate;
  (* src = "AHB_UART_MASTER.v:110.17-110.19" *)
  reg rd;
  (* src = "AHB_UART_MASTER.v:106.17-106.22" *)
  wire [31:0] rdata;
  (* src = "AHB_UART_MASTER.v:112.17-112.26" *)
  reg [31:0] rdata_reg;
  (* src = "AHB_UART_MASTER.v:95.17-95.24" *)
  wire [7:0] rx_data;
  (* src = "AHB_UART_MASTER.v:91.17-91.24" *)
  wire rx_done;
  (* src = "AHB_UART_MASTER.v:108.17-108.22" *)
  reg [3:0] state;
  (* src = "AHB_UART_MASTER.v:94.17-94.24" *)
  wire [7:0] tx_data;
  (* src = "AHB_UART_MASTER.v:92.17-92.24" *)
  wire tx_done;
  (* src = "AHB_UART_MASTER.v:97.17-97.25" *)
  reg tx_start;
  (* src = "AHB_UART_MASTER.v:105.17-105.22" *)
  reg [31:0] wdata;
  (* src = "AHB_UART_MASTER.v:110.21-110.23" *)
  reg wr;
  assign _117_ = state[0] & ~(state[1]);
  assign _118_ = state[2] | ~(state[3]);
  assign _119_ = _117_ & ~(_118_);
  assign _120_ = _119_ & done;
  assign _121_ = ~tx_done;
  assign _122_ = state[0] | ~(state[1]);
  assign _123_ = ~(_122_ | _118_);
  assign _124_ = _123_ & ~(_121_);
  assign _125_ = _124_ | _120_;
  assign _126_ = ~(state[0] & state[1]);
  assign _127_ = ~(_126_ | _118_);
  assign _128_ = _127_ & ~(_121_);
  assign _009_ = _128_ | _125_;
  assign _129_ = ~rx_done;
  assign _130_ = state[2] | state[3];
  assign _131_ = ~(_130_ | _126_);
  assign _136_[42] = _131_ & ~(_129_);
  assign _132_ = _130_ | ~(_117_);
  assign _136_[49] = rx_done & ~(_132_);
  assign _133_ = state[0] | state[1];
  assign _134_ = ~(state[2] & state[3]);
  assign _135_ = ~(_134_ | _133_);
  assign _136_[4] = _135_ & ~(_121_);
  assign _010_ = ~(_130_ | _122_);
  assign _136_[44] = _010_ & ~(_129_);
  assign _011_ = rx_data[1] | ~(rx_data[0]);
  assign _012_ = rx_data[3] | ~(rx_data[2]);
  assign _013_ = _012_ | _011_;
  assign _014_ = rx_data[4] | ~(rx_data[5]);
  assign _015_ = rx_data[6] | ~(rx_data[7]);
  assign _016_ = _015_ | _014_;
  assign _017_ = _016_ | _013_;
  assign cmd_rd = ~_017_;
  assign _018_ = ~(rx_data[1] & rx_data[0]);
  assign _019_ = rx_data[3] | rx_data[2];
  assign _020_ = _019_ | _018_;
  assign cmd_wr = ~(_020_ | _016_);
  assign _021_ = _135_ ? rdata_reg[16] : rdata_reg[24];
  assign _022_ = _127_ ? rdata_reg[8] : _021_;
  assign tx_data[0] = _123_ ? rdata_reg[0] : _022_;
  assign _023_ = _135_ ? rdata_reg[17] : rdata_reg[25];
  assign _024_ = _127_ ? rdata_reg[9] : _023_;
  assign tx_data[1] = _123_ ? rdata_reg[1] : _024_;
  assign _025_ = _135_ ? rdata_reg[18] : rdata_reg[26];
  assign _026_ = _127_ ? rdata_reg[10] : _025_;
  assign tx_data[2] = _123_ ? rdata_reg[2] : _026_;
  assign _027_ = _135_ ? rdata_reg[19] : rdata_reg[27];
  assign _028_ = _127_ ? rdata_reg[11] : _027_;
  assign tx_data[3] = _123_ ? rdata_reg[3] : _028_;
  assign _029_ = _135_ ? rdata_reg[20] : rdata_reg[28];
  assign _030_ = _127_ ? rdata_reg[12] : _029_;
  assign tx_data[4] = _123_ ? rdata_reg[4] : _030_;
  assign _031_ = _135_ ? rdata_reg[21] : rdata_reg[29];
  assign _032_ = _127_ ? rdata_reg[13] : _031_;
  assign tx_data[5] = _123_ ? rdata_reg[5] : _032_;
  assign _033_ = _135_ ? rdata_reg[22] : rdata_reg[30];
  assign _034_ = _127_ ? rdata_reg[14] : _033_;
  assign tx_data[6] = _123_ ? rdata_reg[6] : _034_;
  assign _035_ = _135_ ? rdata_reg[23] : rdata_reg[31];
  assign _036_ = _127_ ? rdata_reg[15] : _035_;
  assign tx_data[7] = _123_ ? rdata_reg[7] : _036_;
  assign _037_ = _117_ & ~(_134_);
  assign _038_ = tx_done ? _135_ : _037_;
  assign _039_ = tx_done ? _123_ : _127_;
  assign _040_ = _039_ | _038_;
  assign _041_ = _119_ & ~(done);
  assign _042_ = state[3] | ~(state[2]);
  assign _043_ = _042_ | _126_;
  assign _044_ = _043_ | rx_done;
  assign _045_ = ~(_042_ | _122_);
  assign _046_ = ~(_045_ & rx_done);
  assign _047_ = ~(_046_ & _044_);
  assign _048_ = _047_ | _041_;
  assign _049_ = _048_ | _040_;
  assign _050_ = _042_ | ~(_117_);
  assign _051_ = _129_ & ~(_050_);
  assign _052_ = wr | ~(rd);
  assign _053_ = rx_done & ~(_052_);
  assign _054_ = rd | ~(wr);
  assign _055_ = rx_done & ~(_054_);
  assign _056_ = _055_ | _053_;
  assign _057_ = ~(_042_ | _133_);
  assign _058_ = ~_057_;
  assign _059_ = _056_ & ~(_058_);
  assign _060_ = _059_ | _051_;
  assign _061_ = rx_done ? _010_ : _131_;
  assign _062_ = _061_ | _060_;
  assign _063_ = _129_ & ~(_132_);
  assign _064_ = _017_ & ~(cmd_wr);
  assign _065_ = rx_done & ~(_064_);
  assign _066_ = _133_ | _130_;
  assign _067_ = _065_ & ~(_066_);
  assign _068_ = _067_ | _063_;
  assign _069_ = _068_ | _062_;
  assign _070_ = _069_ | _049_;
  assign _071_ = ~(_037_ | _135_);
  assign _072_ = ~(_127_ | _123_);
  assign _073_ = ~(_072_ & _071_);
  assign _074_ = ~(_133_ | _118_);
  assign _075_ = _074_ | _119_;
  assign _076_ = _045_ | ~(_043_);
  assign _077_ = _076_ | _075_;
  assign _078_ = _077_ | _073_;
  assign _079_ = _057_ | ~(_050_);
  assign _080_ = _010_ | _131_;
  assign _081_ = _080_ | _079_;
  assign _082_ = ~(_066_ & _132_);
  assign _083_ = _082_ | _081_;
  assign _084_ = _083_ | _078_;
  assign nstate[0] = _084_ & _070_;
  assign _085_ = ~(_127_ & _121_);
  assign _086_ = _085_ & ~(_123_);
  assign _087_ = _044_ & ~(_045_);
  assign _088_ = _120_ | ~(_087_);
  assign _089_ = _086_ & ~(_088_);
  assign _090_ = rx_done & ~(_050_);
  assign _091_ = _131_ & ~(rx_done);
  assign _092_ = _091_ | _010_;
  assign _093_ = _092_ | _090_;
  assign _094_ = _093_ | _136_[49];
  assign _095_ = _089_ & ~(_094_);
  assign nstate[1] = _084_ & ~(_095_);
  assign _096_ = _037_ & ~(tx_done);
  assign _097_ = _096_ | _135_;
  assign _098_ = _097_ | _128_;
  assign _099_ = _087_ & ~(_098_);
  assign _100_ = _053_ & ~(_055_);
  assign _101_ = _057_ & ~(_100_);
  assign _102_ = _101_ | ~(_050_);
  assign _103_ = _102_ | _136_[42];
  assign _104_ = _099_ & ~(_103_);
  assign nstate[2] = _084_ & ~(_104_);
  assign _105_ = _072_ & ~(_097_);
  assign _106_ = _074_ & ~(rx_done);
  assign _107_ = _106_ | _119_;
  assign _108_ = rx_done & ~(_043_);
  assign _109_ = _108_ | _107_;
  assign _110_ = _105_ & ~(_109_);
  assign _111_ = _052_ | _129_;
  assign _112_ = _057_ & ~(_111_);
  assign _113_ = _110_ & ~(_112_);
  assign nstate[3] = _084_ & ~(_113_);
  assign _000_ = rx_done & ~(_066_);
  assign _001_ = _057_ & ~(_129_);
  assign _002_ = _090_ & wr;
  assign _003_ = wr & ~(_046_);
  assign _004_ = _108_ & wr;
  assign _114_ = ~(_074_ & rx_done);
  assign _005_ = wr & ~(_114_);
  assign _115_ = ~(wr & rx_done);
  assign _006_ = _074_ & ~(_115_);
  assign _116_ = ~(rd & rx_done);
  assign _007_ = _057_ & ~(_116_);
  assign _008_ = done & rd;
  (* src = "AHB_UART_MASTER.v:183.9-191.16" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) wr <= 1'h0;
    else if (_000_) wr <= cmd_wr;
  (* src = "AHB_UART_MASTER.v:276.5-286.29" *)
  always @(posedge HCLK)
    if (_009_) tx_start <= 1'h1;
    else tx_start <= _136_[4];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[0] <= rdata[0];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[1] <= rdata[1];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[2] <= rdata[2];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[3] <= rdata[3];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[4] <= rdata[4];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[5] <= rdata[5];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[6] <= rdata[6];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[7] <= rdata[7];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[8] <= rdata[8];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[9] <= rdata[9];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[10] <= rdata[10];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[11] <= rdata[11];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[12] <= rdata[12];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[13] <= rdata[13];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[14] <= rdata[14];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[15] <= rdata[15];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[16] <= rdata[16];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[17] <= rdata[17];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[18] <= rdata[18];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[19] <= rdata[19];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[20] <= rdata[20];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[21] <= rdata[21];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[22] <= rdata[22];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[23] <= rdata[23];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[24] <= rdata[24];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[25] <= rdata[25];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[26] <= rdata[26];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[27] <= rdata[27];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[28] <= rdata[28];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[29] <= rdata[29];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[30] <= rdata[30];
  (* src = "AHB_UART_MASTER.v:272.5-274.32" *)
  always @(posedge HCLK)
    if (_008_) rdata_reg[31] <= rdata[31];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[24] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[25] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[26] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[27] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[28] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[29] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[30] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:217.9-219.41" *)
  always @(posedge HCLK)
    if (_005_) wdata[31] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[16] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[17] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[18] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[19] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[20] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[21] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[22] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:214.9-216.41" *)
  always @(posedge HCLK)
    if (_004_) wdata[23] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[8] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[9] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[10] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[11] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[12] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[13] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[14] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:211.9-213.40" *)
  always @(posedge HCLK)
    if (_003_) wdata[15] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[0] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[1] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[2] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[3] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[4] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[5] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[6] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:208.9-210.39" *)
  always @(posedge HCLK)
    if (_002_) wdata[7] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[24] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[25] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[26] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[27] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[28] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[29] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[30] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:203.9-205.40" *)
  always @(posedge HCLK)
    if (_001_) addr[31] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[16] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[17] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[18] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[19] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[20] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[21] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[22] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:200.9-202.40" *)
  always @(posedge HCLK)
    if (_136_[42]) addr[23] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[8] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[9] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[10] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[11] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[12] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[13] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[14] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:197.9-199.39" *)
  always @(posedge HCLK)
    if (_136_[44]) addr[15] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[0] <= rx_data[0];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[1] <= rx_data[1];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[2] <= rx_data[2];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[3] <= rx_data[3];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[4] <= rx_data[4];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[5] <= rx_data[5];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[6] <= rx_data[6];
  (* src = "AHB_UART_MASTER.v:194.9-196.38" *)
  always @(posedge HCLK)
    if (_136_[49]) addr[7] <= rx_data[7];
  (* src = "AHB_UART_MASTER.v:183.9-191.16" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) rd <= 1'h0;
    else if (_000_) rd <= cmd_rd;
  (* src = "AHB_UART_MASTER.v:114.5-118.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[0] <= 1'h0;
    else state[0] <= nstate[0];
  (* src = "AHB_UART_MASTER.v:114.5-118.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[1] <= 1'h0;
    else state[1] <= nstate[1];
  (* src = "AHB_UART_MASTER.v:114.5-118.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[2] <= 1'h0;
    else state[2] <= nstate[2];
  (* src = "AHB_UART_MASTER.v:114.5-118.29" *)
  always @(posedge HCLK, negedge HRESETn)
    if (!HRESETn) state[3] <= 1'h0;
    else state[3] <= nstate[3];
  (* module_not_derived = 32'd1 *)
  (* src = "AHB_UART_MASTER.v:248.16-266.2" *)
  AHB_MASTER M (
    .HADDR(HADDR),
    .HCLK(HCLK),
    .HRDATA(HRDATA),
    .HREADY(HREADY),
    .HRESETn(HRESETn),
    .HSIZE(HSIZE),
    .HTRANS(HTRANS),
    .HWDATA(HWDATA),
    .HWRITE(HWRITE),
    .addr(addr),
    .done(done),
    .rd(_007_),
    .rdata(rdata),
    .wdata(wdata),
    .wr(_006_)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "AHB_UART_MASTER.v:221.13-227.6" *)
  BAUDGEN uBAUDGEN (
    .baudtick(b_tick),
    .clk(HCLK),
    .en(1'h1),
    .prescale(16'h000C),
    .rst_n(HRESETn)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "AHB_UART_MASTER.v:229.13-236.6" *)
  UART_RX uUART_RX (
    .b_tick(b_tick),
    .clk(HCLK),
    .dout(rx_data),
    .resetn(HRESETn),
    .rx(RX),
    .rx_done(rx_done)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "AHB_UART_MASTER.v:238.13-246.6" *)
  UART_TX uUART_TX (
    .b_tick(b_tick),
    .clk(HCLK),
    .d_in(tx_data),
    .resetn(HRESETn),
    .tx(TX),
    .tx_done(tx_done),
    .tx_start(tx_start)
  );
  assign { _136_[55:53], _136_[51:50], _136_[47:46], _136_[43], _136_[40], _136_[37], _136_[35], _136_[31], _136_[29], _136_[25:24], _136_[22:20], _136_[18], _136_[14:13], _136_[8], _136_[6:5], _136_[2:0] } = { 8'h00, _136_[41], 3'h0, _136_[30], _136_[26], _136_[26], 5'h00, _136_[15], _136_[9], _136_[7], 1'h0, _136_[3], 1'h0, _136_[3] };
endmodule

(* src = "AHB_UART_MASTER.v:382.1-406.10" *)
module BAUDGEN(clk, rst_n, prescale, en, baudtick);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  (* src = "AHB_UART_MASTER.v:388.15-388.23" *)
  output baudtick;
  wire baudtick;
  (* src = "AHB_UART_MASTER.v:384.14-384.17" *)
  input clk;
  wire clk;
  (* src = "AHB_UART_MASTER.v:392.13-392.23" *)
  wire [15:0] count_next;
  (* src = "AHB_UART_MASTER.v:391.12-391.21" *)
  reg [15:0] count_reg;
  (* src = "AHB_UART_MASTER.v:387.14-387.16" *)
  input en;
  wire en;
  (* src = "AHB_UART_MASTER.v:386.21-386.29" *)
  input [15:0] prescale;
  wire [15:0] prescale;
  (* src = "AHB_UART_MASTER.v:385.14-385.19" *)
  input rst_n;
  wire rst_n;
  assign _027_ = ~(prescale[0] ^ count_reg[0]);
  assign _028_ = prescale[1] ^ count_reg[1];
  assign _029_ = _027_ & ~(_028_);
  assign _030_ = prescale[2] ^ count_reg[2];
  assign _031_ = prescale[3] ^ count_reg[3];
  assign _032_ = _031_ | _030_;
  assign _033_ = _029_ & ~(_032_);
  assign _034_ = prescale[4] ^ count_reg[4];
  assign _035_ = prescale[5] ^ count_reg[5];
  assign _036_ = _035_ | _034_;
  assign _037_ = prescale[6] ^ count_reg[6];
  assign _038_ = prescale[7] ^ count_reg[7];
  assign _039_ = _038_ | _037_;
  assign _040_ = _039_ | _036_;
  assign _041_ = _033_ & ~(_040_);
  assign _042_ = prescale[8] ^ count_reg[8];
  assign _043_ = prescale[9] ^ count_reg[9];
  assign _044_ = _043_ | _042_;
  assign _045_ = prescale[10] ^ count_reg[10];
  assign _046_ = prescale[11] ^ count_reg[11];
  assign _047_ = _046_ | _045_;
  assign _048_ = _047_ | _044_;
  assign _049_ = prescale[12] ^ count_reg[12];
  assign _050_ = prescale[13] ^ count_reg[13];
  assign _051_ = _050_ | _049_;
  assign _052_ = prescale[14] ^ count_reg[14];
  assign _053_ = prescale[15] ^ count_reg[15];
  assign _054_ = _053_ | _052_;
  assign _055_ = _054_ | _051_;
  assign _056_ = _055_ | _048_;
  assign baudtick = _041_ & ~(_056_);
  assign count_next[0] = ~(baudtick | count_reg[0]);
  assign _057_ = count_reg[1] ^ count_reg[0];
  assign count_next[1] = _057_ & ~(baudtick);
  assign _058_ = count_reg[1] & count_reg[0];
  assign _059_ = _058_ ^ count_reg[2];
  assign count_next[2] = _059_ & ~(baudtick);
  assign _060_ = ~(_058_ & count_reg[2]);
  assign _061_ = ~(_060_ ^ count_reg[3]);
  assign count_next[3] = _061_ & ~(baudtick);
  assign _062_ = ~(count_reg[3] & count_reg[2]);
  assign _063_ = _058_ & ~(_062_);
  assign _064_ = _063_ ^ count_reg[4];
  assign count_next[4] = _064_ & ~(baudtick);
  assign _065_ = ~(_063_ & count_reg[4]);
  assign _066_ = ~(_065_ ^ count_reg[5]);
  assign count_next[5] = _066_ & ~(baudtick);
  assign _067_ = _062_ | ~(_058_);
  assign _068_ = ~(count_reg[5] & count_reg[4]);
  assign _069_ = _068_ | _067_;
  assign _000_ = ~(_069_ ^ count_reg[6]);
  assign count_next[6] = _000_ & ~(baudtick);
  assign _001_ = _069_ | ~(count_reg[6]);
  assign _002_ = ~(_001_ ^ count_reg[7]);
  assign count_next[7] = _002_ & ~(baudtick);
  assign _003_ = ~(count_reg[7] & count_reg[6]);
  assign _004_ = _003_ | _068_;
  assign _005_ = _063_ & ~(_004_);
  assign _006_ = _005_ ^ count_reg[8];
  assign count_next[8] = _006_ & ~(baudtick);
  assign _007_ = ~(_005_ & count_reg[8]);
  assign _008_ = ~(_007_ ^ count_reg[9]);
  assign count_next[9] = _008_ & ~(baudtick);
  assign _009_ = _004_ | _067_;
  assign _010_ = ~(count_reg[9] & count_reg[8]);
  assign _011_ = _010_ | _009_;
  assign _012_ = ~(_011_ ^ count_reg[10]);
  assign count_next[10] = _012_ & ~(baudtick);
  assign _013_ = ~baudtick;
  assign _014_ = _011_ | ~(count_reg[10]);
  assign _015_ = _014_ ^ count_reg[11];
  assign count_next[11] = _013_ & ~(_015_);
  assign _016_ = ~(count_reg[11] & count_reg[10]);
  assign _017_ = _016_ | _010_;
  assign _018_ = _005_ & ~(_017_);
  assign _019_ = _018_ ^ count_reg[12];
  assign count_next[12] = _019_ & ~(baudtick);
  assign _020_ = ~(_018_ & count_reg[12]);
  assign _021_ = _020_ ^ count_reg[13];
  assign count_next[13] = _013_ & ~(_021_);
  assign _022_ = count_reg[13] & count_reg[12];
  assign _023_ = ~(_022_ & _018_);
  assign _024_ = _023_ ^ count_reg[14];
  assign count_next[14] = _013_ & ~(_024_);
  assign _025_ = _023_ | ~(count_reg[14]);
  assign _026_ = _025_ ^ count_reg[15];
  assign count_next[15] = _013_ & ~(_026_);
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[0] <= 1'h0;
    else if (en) count_reg[0] <= count_next[0];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[1] <= 1'h0;
    else if (en) count_reg[1] <= count_next[1];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[2] <= 1'h0;
    else if (en) count_reg[2] <= count_next[2];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[3] <= 1'h0;
    else if (en) count_reg[3] <= count_next[3];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[4] <= 1'h0;
    else if (en) count_reg[4] <= count_next[4];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[5] <= 1'h0;
    else if (en) count_reg[5] <= count_next[5];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[6] <= 1'h0;
    else if (en) count_reg[6] <= count_next[6];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[7] <= 1'h0;
    else if (en) count_reg[7] <= count_next[7];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[8] <= 1'h0;
    else if (en) count_reg[8] <= count_next[8];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[9] <= 1'h0;
    else if (en) count_reg[9] <= count_next[9];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[10] <= 1'h0;
    else if (en) count_reg[10] <= count_next[10];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[11] <= 1'h0;
    else if (en) count_reg[11] <= count_next[11];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[12] <= 1'h0;
    else if (en) count_reg[12] <= count_next[12];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[13] <= 1'h0;
    else if (en) count_reg[13] <= count_next[13];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[14] <= 1'h0;
    else if (en) count_reg[14] <= count_next[14];
  (* src = "AHB_UART_MASTER.v:395.1-401.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) count_reg[15] <= 1'h0;
    else if (en) count_reg[15] <= count_next[15];
endmodule

(* src = "AHB_UART_MASTER.v:409.1-510.10" *)
module UART_RX(clk, resetn, b_tick, rx, rx_done, dout);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  (* src = "AHB_UART_MASTER.v:429.13-429.19" *)
  wire [3:0] b_next;
  (* src = "AHB_UART_MASTER.v:428.13-428.18" *)
  reg [3:0] b_reg;
  (* src = "AHB_UART_MASTER.v:412.14-412.20" *)
  input b_tick;
  wire b_tick;
  (* src = "AHB_UART_MASTER.v:410.14-410.17" *)
  input clk;
  wire clk;
  (* src = "AHB_UART_MASTER.v:431.13-431.23" *)
  wire [2:0] count_next;
  (* src = "AHB_UART_MASTER.v:430.13-430.22" *)
  reg [2:0] count_reg;
  (* src = "AHB_UART_MASTER.v:426.13-426.26" *)
  reg [1:0] current_state;
  (* src = "AHB_UART_MASTER.v:433.13-433.22" *)
  wire [7:0] data_next;
  (* src = "AHB_UART_MASTER.v:432.13-432.21" *)
  reg [7:0] data_reg;
  (* src = "AHB_UART_MASTER.v:416.21-416.25" *)
  output [7:0] dout;
  wire [7:0] dout;
  (* src = "AHB_UART_MASTER.v:427.13-427.23" *)
  wire [1:0] next_state;
  (* src = "AHB_UART_MASTER.v:411.14-411.20" *)
  input resetn;
  wire resetn;
  (* src = "AHB_UART_MASTER.v:413.14-413.16" *)
  input rx;
  wire rx;
  (* src = "AHB_UART_MASTER.v:415.14-415.21" *)
  output rx_done;
  wire rx_done;
  assign _018_ = ~b_tick;
  assign _019_ = current_state[1] & current_state[0];
  assign _020_ = ~(_019_ & _018_);
  assign _021_ = ~_019_;
  assign _022_ = b_reg[1] & b_reg[0];
  assign _023_ = ~(b_reg[2] & b_reg[3]);
  assign _024_ = _022_ & ~(_023_);
  assign _025_ = b_tick & ~(_024_);
  assign _026_ = _025_ & ~(_021_);
  assign _027_ = _020_ & ~(_026_);
  assign _028_ = ~(current_state[1] & current_state[0]);
  assign _001_ = _027_ & ~(_028_);
  assign _029_ = current_state[0] | ~(current_state[1]);
  assign _030_ = _018_ & ~(_029_);
  assign _031_ = _020_ & ~(_030_);
  assign _032_ = current_state[0] & ~(current_state[1]);
  assign _033_ = _032_ & ~(b_tick);
  assign _034_ = _024_ & ~(_018_);
  assign rx_done = _034_ & ~(_029_);
  assign _035_ = rx_done | _033_;
  assign _036_ = _031_ & ~(_035_);
  assign _037_ = ~(current_state[1] | current_state[0]);
  assign _038_ = _037_ & rx;
  assign _002_ = _036_ & ~(_038_);
  assign _039_ = _033_ | _030_;
  assign _040_ = _027_ & ~(_039_);
  assign _041_ = b_reg[3] | ~(b_reg[2]);
  assign _042_ = _022_ & ~(_041_);
  assign _043_ = _042_ | _018_;
  assign _044_ = _032_ & ~(_043_);
  assign _045_ = _044_ | _038_;
  assign _046_ = _025_ & ~(_029_);
  assign _047_ = ~(count_reg[1] & count_reg[0]);
  assign _048_ = _047_ | ~(count_reg[2]);
  assign _049_ = ~(_048_ & _019_);
  assign _050_ = _034_ & ~(_049_);
  assign _051_ = _050_ | _046_;
  assign _052_ = _051_ | _045_;
  assign _003_ = _040_ & ~(_052_);
  assign _053_ = _044_ | _033_;
  assign _054_ = _027_ & ~(_053_);
  assign _055_ = _048_ | _021_;
  assign _056_ = _034_ & ~(_055_);
  assign _057_ = _037_ | ~(_029_);
  assign _058_ = _057_ | _056_;
  assign _000_ = _054_ & ~(_058_);
  assign count_next[0] = _019_ & ~(count_reg[0]);
  assign _059_ = ~(count_reg[1] ^ count_reg[0]);
  assign count_next[1] = _019_ & ~(_059_);
  assign _060_ = _047_ ^ count_reg[2];
  assign count_next[2] = _019_ & ~(_060_);
  assign _061_ = ~(_029_ | b_reg[0]);
  assign _062_ = _024_ | b_reg[0];
  assign _063_ = _019_ & ~(_062_);
  assign _064_ = _063_ | _061_;
  assign _065_ = _042_ | b_reg[0];
  assign _066_ = _032_ & ~(_065_);
  assign _067_ = _066_ | _064_;
  assign b_next[0] = _067_ & ~(_037_);
  assign _068_ = ~_037_;
  assign _069_ = ~(b_reg[1] ^ b_reg[0]);
  assign _070_ = _069_ | _029_;
  assign _071_ = _069_ | _024_;
  assign _072_ = _019_ & ~(_071_);
  assign _073_ = _070_ & ~(_072_);
  assign _074_ = _069_ | _042_;
  assign _075_ = _032_ & ~(_074_);
  assign _076_ = _073_ & ~(_075_);
  assign b_next[1] = _068_ & ~(_076_);
  assign _077_ = ~(_022_ ^ b_reg[2]);
  assign _078_ = _077_ | _029_;
  assign _079_ = _077_ | _024_;
  assign _080_ = _019_ & ~(_079_);
  assign _004_ = _078_ & ~(_080_);
  assign _005_ = _077_ | _042_;
  assign _006_ = _032_ & ~(_005_);
  assign _007_ = _004_ & ~(_006_);
  assign b_next[2] = _068_ & ~(_007_);
  assign _008_ = ~(_022_ & b_reg[2]);
  assign _009_ = _008_ ^ b_reg[3];
  assign _010_ = _009_ | _029_;
  assign _011_ = _009_ | _024_;
  assign _012_ = _019_ & ~(_011_);
  assign _013_ = _010_ & ~(_012_);
  assign _014_ = _009_ | _042_;
  assign _015_ = _032_ & ~(_014_);
  assign _016_ = _013_ & ~(_015_);
  assign b_next[3] = _068_ & ~(_016_);
  assign next_state[0] = _037_ | _032_;
  assign _017_ = ~(_032_ | _019_);
  assign next_state[1] = _068_ & ~(_017_);
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) count_reg[0] <= 1'h0;
    else if (_000_) count_reg[0] <= count_next[0];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) count_reg[1] <= 1'h0;
    else if (_000_) count_reg[1] <= count_next[1];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) count_reg[2] <= 1'h0;
    else if (_000_) count_reg[2] <= count_next[2];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) current_state[0] <= 1'h0;
    else if (_003_) current_state[0] <= next_state[0];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) current_state[1] <= 1'h0;
    else if (_003_) current_state[1] <= next_state[1];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[0] <= 1'h0;
    else if (_002_) b_reg[0] <= b_next[0];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[1] <= 1'h0;
    else if (_002_) b_reg[1] <= b_next[1];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[2] <= 1'h0;
    else if (_002_) b_reg[2] <= b_next[2];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[3] <= 1'h0;
    else if (_002_) b_reg[3] <= b_next[3];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[0] <= 1'h0;
    else if (_001_) data_reg[0] <= data_reg[1];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[1] <= 1'h0;
    else if (_001_) data_reg[1] <= data_reg[2];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[2] <= 1'h0;
    else if (_001_) data_reg[2] <= data_reg[3];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[3] <= 1'h0;
    else if (_001_) data_reg[3] <= data_reg[4];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[4] <= 1'h0;
    else if (_001_) data_reg[4] <= data_reg[5];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[5] <= 1'h0;
    else if (_001_) data_reg[5] <= data_reg[6];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[6] <= 1'h0;
    else if (_001_) data_reg[6] <= data_reg[7];
  (* src = "AHB_UART_MASTER.v:436.3-452.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[7] <= 1'h0;
    else if (_001_) data_reg[7] <= rx;
  assign data_next = { rx, data_reg[7:1] };
  assign dout = data_reg;
endmodule

(* src = "AHB_UART_MASTER.v:512.1-633.10" *)
module UART_TX(clk, resetn, tx_start, b_tick, d_in, tx_done, tx);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  (* src = "AHB_UART_MASTER.v:532.15-532.21" *)
  wire [3:0] b_next;
  (* src = "AHB_UART_MASTER.v:531.15-531.20" *)
  reg [3:0] b_reg;
  (* src = "AHB_UART_MASTER.v:516.14-516.20" *)
  input b_tick;
  wire b_tick;
  (* src = "AHB_UART_MASTER.v:513.14-513.17" *)
  input clk;
  wire clk;
  (* src = "AHB_UART_MASTER.v:534.15-534.25" *)
  wire [2:0] count_next;
  (* src = "AHB_UART_MASTER.v:533.15-533.24" *)
  reg [2:0] count_reg;
  (* src = "AHB_UART_MASTER.v:529.15-529.28" *)
  reg [1:0] current_state;
  (* src = "AHB_UART_MASTER.v:517.20-517.24" *)
  input [7:0] d_in;
  wire [7:0] d_in;
  (* src = "AHB_UART_MASTER.v:536.15-536.24" *)
  wire [7:0] data_next;
  (* src = "AHB_UART_MASTER.v:535.15-535.23" *)
  reg [7:0] data_reg;
  (* src = "AHB_UART_MASTER.v:530.15-530.25" *)
  wire [1:0] next_state;
  (* src = "AHB_UART_MASTER.v:514.14-514.20" *)
  input resetn;
  wire resetn;
  (* src = "AHB_UART_MASTER.v:519.15-519.17" *)
  output tx;
  wire tx;
  (* src = "AHB_UART_MASTER.v:518.14-518.21" *)
  output tx_done;
  wire tx_done;
  (* src = "AHB_UART_MASTER.v:538.9-538.16" *)
  wire tx_next;
  (* src = "AHB_UART_MASTER.v:537.9-537.15" *)
  reg tx_reg;
  (* src = "AHB_UART_MASTER.v:515.14-515.22" *)
  input tx_start;
  wire tx_start;
  assign _031_ = ~b_tick;
  assign _032_ = current_state[0] & current_state[1];
  assign _033_ = ~(_032_ & _031_);
  assign _034_ = ~_032_;
  assign _035_ = b_reg[1] & b_reg[0];
  assign _036_ = ~(b_reg[2] & b_reg[3]);
  assign _037_ = _035_ & ~(_036_);
  assign _038_ = b_tick & ~(_037_);
  assign _039_ = _038_ & ~(_034_);
  assign _040_ = _033_ & ~(_039_);
  assign _010_ = ~(current_state[0] | current_state[1]);
  assign _041_ = _010_ & ~(tx_start);
  assign _042_ = current_state[1] & ~(current_state[0]);
  assign _030_ = current_state[0] & ~(current_state[1]);
  assign _043_ = _030_ | _042_;
  assign _044_ = _043_ | _041_;
  assign _000_ = _040_ & ~(_044_);
  assign _045_ = _030_ | _032_;
  assign _046_ = _045_ & ~(b_tick);
  assign _047_ = ~(_046_ | _041_);
  assign _048_ = _042_ & ~(b_tick);
  assign _049_ = ~_042_;
  assign _050_ = _037_ & ~(_031_);
  assign tx_done = _050_ & ~(_049_);
  assign _051_ = tx_done | _048_;
  assign _001_ = _047_ & ~(_051_);
  assign _052_ = ~(count_reg[1] & count_reg[0]);
  assign _053_ = _052_ | ~(count_reg[2]);
  assign _054_ = ~(_053_ & _032_);
  assign _055_ = _050_ & ~(_054_);
  assign _056_ = _033_ & ~(_055_);
  assign _057_ = _041_ | _039_;
  assign _058_ = _056_ & ~(_057_);
  assign _059_ = _030_ & ~(b_tick);
  assign _060_ = _059_ | _048_;
  assign _061_ = _038_ & ~(_049_);
  assign _062_ = _030_ & _038_;
  assign _063_ = _062_ | _061_;
  assign _064_ = _063_ | _060_;
  assign _002_ = _058_ & ~(_064_);
  assign _065_ = _062_ | _059_;
  assign _066_ = _040_ & ~(_065_);
  assign _067_ = _053_ | _034_;
  assign _068_ = _050_ & ~(_067_);
  assign _069_ = _042_ | _010_;
  assign _070_ = _069_ | _068_;
  assign _003_ = _066_ & ~(_070_);
  assign data_next[0] = _032_ ? data_reg[1] : d_in[0];
  assign data_next[1] = _032_ ? data_reg[2] : d_in[1];
  assign data_next[2] = _032_ ? data_reg[3] : d_in[2];
  assign data_next[3] = _032_ ? data_reg[4] : d_in[3];
  assign data_next[4] = _032_ ? data_reg[5] : d_in[4];
  assign data_next[5] = _032_ ? data_reg[6] : d_in[5];
  assign data_next[6] = _032_ ? data_reg[7] : d_in[6];
  assign data_next[7] = d_in[7] & ~(_032_);
  assign count_next[0] = _032_ & ~(count_reg[0]);
  assign _004_ = ~(count_reg[1] ^ count_reg[0]);
  assign count_next[1] = _032_ & ~(_004_);
  assign _005_ = _052_ ^ count_reg[2];
  assign count_next[2] = _032_ & ~(_005_);
  assign _006_ = _042_ & ~(b_reg[0]);
  assign _007_ = _037_ | b_reg[0];
  assign _008_ = _045_ & ~(_007_);
  assign _009_ = _008_ | _006_;
  assign b_next[0] = _009_ & ~(_010_);
  assign _011_ = ~_010_;
  assign _012_ = ~(b_reg[1] ^ b_reg[0]);
  assign _013_ = _012_ | ~(_042_);
  assign _014_ = _012_ | _037_;
  assign _015_ = _045_ & ~(_014_);
  assign _016_ = _013_ & ~(_015_);
  assign b_next[1] = _011_ & ~(_016_);
  assign _017_ = ~(_035_ ^ b_reg[2]);
  assign _018_ = _017_ | _049_;
  assign _019_ = _017_ | _037_;
  assign _020_ = _045_ & ~(_019_);
  assign _021_ = _018_ & ~(_020_);
  assign b_next[2] = _011_ & ~(_021_);
  assign _022_ = ~(_035_ & b_reg[2]);
  assign _023_ = _022_ ^ b_reg[3];
  assign _024_ = _023_ | _049_;
  assign _025_ = _023_ | _037_;
  assign _026_ = _045_ & ~(_025_);
  assign _027_ = _024_ & ~(_026_);
  assign b_next[3] = _011_ & ~(_027_);
  assign next_state[0] = _010_ | _030_;
  assign next_state[1] = _045_ & ~(_010_);
  assign _028_ = _032_ & data_reg[0];
  assign _029_ = _028_ | _069_;
  assign tx_next = _029_ & ~(_030_);
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) count_reg[0] <= 1'h0;
    else if (_003_) count_reg[0] <= count_next[0];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) count_reg[1] <= 1'h0;
    else if (_003_) count_reg[1] <= count_next[1];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) count_reg[2] <= 1'h0;
    else if (_003_) count_reg[2] <= count_next[2];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) current_state[0] <= 1'h0;
    else if (_002_) current_state[0] <= next_state[0];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) current_state[1] <= 1'h0;
    else if (_002_) current_state[1] <= next_state[1];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[0] <= 1'h0;
    else if (_001_) b_reg[0] <= b_next[0];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[1] <= 1'h0;
    else if (_001_) b_reg[1] <= b_next[1];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[2] <= 1'h0;
    else if (_001_) b_reg[2] <= b_next[2];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) b_reg[3] <= 1'h0;
    else if (_001_) b_reg[3] <= b_next[3];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) tx_reg <= 1'h1;
    else tx_reg <= tx_next;
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[0] <= 1'h0;
    else if (_000_) data_reg[0] <= data_next[0];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[1] <= 1'h0;
    else if (_000_) data_reg[1] <= data_next[1];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[2] <= 1'h0;
    else if (_000_) data_reg[2] <= data_next[2];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[3] <= 1'h0;
    else if (_000_) data_reg[3] <= data_next[3];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[4] <= 1'h0;
    else if (_000_) data_reg[4] <= data_next[4];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[5] <= 1'h0;
    else if (_000_) data_reg[5] <= data_next[5];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[6] <= 1'h0;
    else if (_000_) data_reg[6] <= data_next[6];
  (* src = "AHB_UART_MASTER.v:541.3-559.6" *)
  always @(posedge clk, negedge resetn)
    if (!resetn) data_reg[7] <= 1'h0;
    else if (_000_) data_reg[7] <= data_next[7];
  assign tx = tx_reg;
endmodule